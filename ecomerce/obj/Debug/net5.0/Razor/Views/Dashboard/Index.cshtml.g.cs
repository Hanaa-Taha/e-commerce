#pragma checksum "C:\Users\user\source\repos\e-commerce2\ecomerce\Views\Dashboard\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ba7f419b2e59ef0c1ce3c5d619b03c51561a6187"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Dashboard_Index), @"mvc.1.0.view", @"/Views/Dashboard/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\user\source\repos\e-commerce2\ecomerce\Views\_ViewImports.cshtml"
using ecomerce;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\user\source\repos\e-commerce2\ecomerce\Views\_ViewImports.cshtml"
using ecomerce.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ba7f419b2e59ef0c1ce3c5d619b03c51561a6187", @"/Views/Dashboard/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ea6d205dceb24ceeba6a920790a368fb04fd308d", @"/Views/_ViewImports.cshtml")]
    public class Views_Dashboard_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/iconsDashboard.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/styleDashboard.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("action", new global::Microsoft.AspNetCore.Html.HtmlString(""), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<!DOCTYPE html>\r\n<html lang=\"ar\">\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba7f419b2e59ef0c1ce3c5d619b03c51561a61875104", async() => {
                WriteLiteral(@"
    <meta charset=""UTF-8"">
    <meta http-equiv=""X-UA-Compatible"" content=""IE=edge"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Document</title>
    <link href=""https://fonts.googleapis.com/icon?family=Material+Icons"" rel=""stylesheet"">
    <link rel=""preconnect"" href=""https://fonts.googleapis.com"">
    <link rel=""preconnect"" href=""https://fonts.gstatic.com"" crossorigin>
    <link href=""https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"" rel=""stylesheet"">
    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "ba7f419b2e59ef0c1ce3c5d619b03c51561a61876017", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\" crossorigin=\"anonymous\">\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "ba7f419b2e59ef0c1ce3c5d619b03c51561a61877422", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js@3.6.2/dist/chart.min.js\"></script>\r\n    <script src=\"main.js\"></script>\r\n\r\n\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba7f419b2e59ef0c1ce3c5d619b03c51561a61879449", async() => {
                WriteLiteral(@"
    <div class=""dashboard"">
        <section class=""navigation"">
            <div>
                <a href=""#main""><span class=""material-icons-outlined"">dashboard</span></a>
                <a href=""#control""><span class=""material-icons-outlined""> build </span></a>
                <span class=""material-icons-outlined"">trending_up</span>
                <span class=""material-icons-outlined"">insert_invitation</span>
                <span class=""material-icons-outlined""> settings_suggest </span>
                <span class=""material-icons-outlined"">logout</span>
            </div>
            <img src=""https://www.icmetl.org/wp-content/uploads/2020/11/user-icon-human-person-sign-vector-10206693.png"" alt=""user image"" class=""user"">

        </section>

        <section class=""main"" id=""main"">
            <div class=""search"">
                <div class=""notifications"">
                    <span class=""material-icons-outlined"">notifications</span>
                    <span class=""material-icons-o");
                WriteLiteral("utlined\">edit</span>\r\n                </div>\r\n                ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba7f419b2e59ef0c1ce3c5d619b03c51561a618710867", async() => {
                    WriteLiteral("\r\n                    <input type=\"text\" name=\"search\" id=\"search\" placeholder=\"ابحث هنا\">\r\n                    <span class=\"material-icons-outlined\">search</span>\r\n\r\n                ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"

            </div>
            <!-- <div class=""title"">
              <h1>بياناتي</h1>
               <form action="""">
                <select name="""" id="""">
                  <option value=""soilTemperature"">soil temperature</option>
                  <option value=""soilMoisture"">soil moisture</option>
                  <option value=""atmosphericPressure"">Atmospheric pressure</option>
                  <option value=""illumination"">Intensity of illumination</option>
                  <option value=""tempture"">temperature</option>
                  <option value=""moisture"">moisture</option>

                </select>
              </form>
            </div>  -->
            <section class=""weather"">
            </section>
            <div class=""info_list"">
                <div class=""info"">
                    <div class=""category""></div>
                    <div class=""flex"">
                        <h2>درجة حرارة التربة</h2>
                        <span class=""material-icons-outline");
                WriteLiteral(@"d"">thermostat</span>

                    </div>
                    <div class=""colume"">
                        <p id=""soilTemp""></p>
                        <meter id=""soilTempmeter"" max=""100"" min=""-100"" low=""25"" high=""30"" optimum=""20""></meter>
                    </div>


                </div>
                <div class=""info"">
                    <div class=""category category_color1""></div>
                    <div class=""flex"">
                        <h2>رطوبة التربة</h2>
                        <span class=""material-icons-outlined"">water_drop</span>

                    </div>

                    <div class=""gauge"">

                        <div class=""gauge__body"">
                            <div class=""gauge__fill category_color1""></div>
                            <div class=""gauge__cover""></div>
                        </div>
                    </div>
                </div>
                <div class=""info"">
                    <div class=""category category_color2""><");
                WriteLiteral(@"/div>
                    <div class=""flex"">
                        <h2> الضغط الجوي</h2>
                        <span class=""material-icons-outlined"">speed</span>

                    </div>

                    <div class=""gauge"">

                        <div class=""gauge__body"">
                            <div class=""gauge__fill category_color2""></div>
                            <div class=""gauge__cover""></div>
                        </div>
                    </div>
                </div>
                <div class=""info"">
                    <div class=""category category_color3""></div>
                    <div class=""flex"">
                        <h2>شدة الإضاءة</h2>
                        <span class=""material-icons-outlined"">light</span>

                    </div>

                    <div class=""gauge"">

                        <div class=""gauge__body"">
                            <div class=""gauge__fill category_color3""></div>
                            <div class");
                WriteLiteral(@"=""gauge__cover""></div>
                        </div>
                    </div>
                </div>
                <div class=""info"">
                    <div class=""category category_color4""></div>
                    <div class=""flex"">
                        <h2>درجة الحرارة</h2>
                        <span class=""material-icons-outlined"">thermostat</span>

                    </div>
                    <div class=""colume"">
                        <p id=""airTemp""></p>
                        <meter id=""airTempmeter"" max=""100"" min=""-100"" low=""25"" high=""30"" optimum=""20""></meter>
                    </div>




                </div>
                <div class=""info"">
                    <div class=""category category_color5""></div>
                    <div class=""flex"">
                        <h2>ملوحة التربة</h2>
                        <span class=""material-icons-outlined"">water_drop</span>

                    </div>

                    <div class=""gauge"">

           ");
                WriteLiteral(@"             <div class=""gauge__body"">
                            <div class=""gauge__fill category_color5""></div>
                            <div class=""gauge__cover""></div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
        <section class="" control"" id=""control"">
            <div class=""controlbutton"">
                <button type=""button"" id=""action"" class=""btn btn-outline-primary"">تحكم الي</button>
                <button type=""button"" id=""action1"" class=""btn btn-outline-secondary"">تحكم يدوي</button>
            </div>
            <div>
                <div class=""flexSwitchWater"">
                    <label class=""switch"">

                        <input id=""waterSwich"" type=""checkbox"" disabled>
                        <span class=""slider round""></span>
                    </label>
                    <strong style=""color: black;"">مفتاح الماء</strong>

                </div>

                <div class=""f");
                WriteLiteral(@"lexSwitchWater"">
                    <label class=""switch"">
                        <input id=""fertSwich"" type=""checkbox"" disabled>
                        <span class=""slider round""></span>
                    </label>
                    <strong style=""color: black;"">مفتاح التسميد</strong>

                </div>
            </div>
        </section>

    </div>
    <script src=""https://unpkg.com/sweetalert/dist/sweetalert.min.js""></script>

    <script type=""module"">

        const gaugeElement = document.querySelector("".gauge"");
        const gaugeElement1 = document.querySelectorAll("".gauge"")[1];

        const gaugeElement2 = document.querySelectorAll("".gauge"")[2];
        const gaugeElement3 = document.querySelectorAll("".gauge"")[3];
        const soilTempmeter = document.getElementById('soilTempmeter');
        const soilTemp = document.getElementById('soilTemp');
        const airTempmeter = document.getElementById('airTempmeter');
        const airTemp = document.getElementByI");
                WriteLiteral(@"d('airTemp');
        const auto = document.getElementById(""action"");
        const manual = document.getElementById(""action1"");
        function setGaugeValue(gauge, value) {
            if (value < 0 || value > 1) {
                return;
            }

            gauge.querySelector("".gauge__fill"").style.transform = `rotate(${value / 2
                }turn)`;
            gauge.querySelector("".gauge__cover"").textContent = `${Math.round(
                value * 100
            )}`;
        }
        // Import the functions you need from the SDKs you need
        import { initializeApp } from ""https://www.gstatic.com/firebasejs/9.6.6/firebase-app.js"";
        import { getAnalytics } from ""https://www.gstatic.com/firebasejs/9.6.6/firebase-analytics.js"";
        // TODO: Add SDKs for Firebase products that you want to use
        // https://firebase.google.com/docs/web/setup#available-libraries

        // Your web app's Firebase configuration
        // For Firebase JS SDK v7.20.0 and l");
                WriteLiteral(@"ater, measurementId is optional
        const firebaseConfig = {
            apiKey: ""AIzaSyC-yIUJ4vRjf6UUeQW_4j0zIqPphI2Bh_Y"",
            authDomain: ""iotfarmsystem.firebaseapp.com"",
            databaseURL: ""https://iotfarmsystem-default-rtdb.firebaseio.com"",
            projectId: ""iotfarmsystem"",
            storageBucket: ""iotfarmsystem.appspot.com"",
            messagingSenderId: ""576170551394"",
            appId: ""1:576170551394:web:081f20675f679ccf5bc93b"",
            measurementId: ""G-95J4P66NFL""
        };

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const analytics = getAnalytics(app);
        var ischecked = document.getElementById('waterSwich').checked;

        import { getDatabase, ref, get, child, update, remove }
            from ""https://www.gstatic.com/firebasejs/9.6.6/firebase-database.js"";
        const db = getDatabase();

        function readData() {
            const dbref = ref(db);
            get(child(dbref, ""us");
                WriteLiteral(@"erId2/sensors"")).then((snapshot) => {
                if (snapshot.exists()) {
                    setGaugeValue(gaugeElement, '0.0' + snapshot.val().moisture);
                    setGaugeValue(gaugeElement1, '0.0' + snapshot.val().pressure);
                    setGaugeValue(gaugeElement2, '0.0' + snapshot.val().luminous);
                    setGaugeValue(gaugeElement3, '0.0' + snapshot.val().ph);
                    soilTempmeter.value = snapshot.val().soilTemp;
                    soilTemp.innerText = snapshot.val().soilTemp + 'C';
                    airTempmeter.value = snapshot.val().soilTemp;
                    airTemp.innerText = snapshot.val().airTemp + 'C';
                    // console.log(snapshot.val().PHSensor);
                    // console.log(snapshot.val().hSensor);
                    // console.log('isauto'+snapshot.val().isAuto);
                    // console.log(snapshot.val().tempSensor);
                    // console.log(snapshot.val().waterSwitch);
              ");
                WriteLiteral(@"      console.log(document.getElementById('waterSwich').disabled)
                    get(child(dbref, ""userId2/control"")).then((snapshot2) => {
                        console.log(snapshot2.val())
                        if (snapshot2.val().isAuto == 0) {
                            document.getElementById('waterSwich').disabled = false;
                            document.getElementById('fertSwich').disabled = false;


                        } else {
                            document.getElementById('waterSwich').disabled = true;
                            document.getElementById('fertSwich').disabled = true;


                        }
                    });
                } else {
                    console.log('data not found');
                }

            });
        }
        function updateData() {
            update(ref(db, ""userId2/control""), {

                isAuto: true

            }).then(() => {

                swal(""وضع التحكم الالي يعمل "");
         ");
                WriteLiteral(@"       document.getElementById('waterSwich').disabled = true;
                document.getElementById('fertSwich').disabled = true;


            }).catch((error) => {
                alert(error);
            });
        } function updateData1() {
            update(ref(db, ""userId2/control""), {
                isAuto: false

            }).then(() => {

                swal(""وضع التحكم اليدوي يعمل "");
                document.getElementById('waterSwich').disabled = false;
                document.getElementById('fertSwich').disabled = false;

            }).catch((error) => {
                alert(error);
            });
        }
        function OpenwaterSwitch() {
            update(ref(db, ""userId2/control""), {
                waterSwitch: true
            }).then(() => {

                swal(""مفتاح الماء مفتوح"");

            }).catch((error) => {
                (error);
            });
        }
        function OpenfertSwitch() {
            update(ref(db, ""userId2/");
                WriteLiteral(@"control""), {
                fertSwitch: true
            }).then(() => {

                swal(""مفتاح التسميد مفتوح"");

            }).catch((error) => {
                alert(error);
            });
        }


        function ClosedwaterSwitch() {
            update(ref(db, ""userId2/control""), {
                waterSwitch: false
            }).then(() => {
                swal(""مفتاح الماء مغلق"");
            }).catch((error) => {
                alert(error);
            });
        }
        function ClosedfertSwitch() {
            update(ref(db, ""userId2/control""), {
                fertSwitch: false
            }).then(() => {
                swal(""مفتاح التسميد مغلق"");
            }).catch((error) => {
                alert(error);
            });
        }
        function waterSwitchValue() {
            const dbref = ref(db);
            get(child(dbref, ""userId2/control"")).then((snapshot) => {
                if (snapshot.exists()) {
                    if (sna");
                WriteLiteral(@"pshot.val().isAuto == 1) {
                        if (snapshot.val().waterSwitch == 1) {
                            document.getElementById('waterSwich').checked = true;
                        } else if (snapshot.val().waterSwitch == 0) {
                            document.getElementById('waterSwich').checked = false;
                        }
                        if (snapshot.val().fertSwitch == 1) {
                            document.getElementById('fertSwich').checked = true;
                        } else if (snapshot.val().fertSwitch == 0) {
                            document.getElementById('fertSwich').checked = false;
                        }
                    }

                } else {
                    console.log('data not found');
                }

            });

        }
        setInterval(readData, 60000);
        setInterval(waterSwitchValue, 1000);
        document.getElementById('waterSwich').addEventListener('change', function () {
            if ");
                WriteLiteral(@"(document.getElementById('waterSwich').disabled == false) {

                if (this.checked) {
                    OpenwaterSwitch();
                } else {
                    ClosedwaterSwitch();
                }
            }
        })
        document.getElementById('fertSwich').addEventListener('change', function () {
            if (document.getElementById('fertSwich').disabled == false) {

                if (this.checked) {
                    OpenfertSwitch();
                } else {
                    ClosedfertSwitch();
                }
            }
        })


        window.addEventListener('load', readData);
        document.getElementById(""action"").addEventListener('click', updateData);
        document.getElementById(""action1"").addEventListener('click', updateData1);


    </script>

    <!-- <script type=""module"">

    const gaugeElement = document.querySelector("".gauge"");
       const gaugeElement1= document.querySelectorAll("".gauge"")[1];

       c");
                WriteLiteral(@"onst gaugeElement2= document.querySelectorAll("".gauge"")[2];
       const gaugeElement3= document.querySelectorAll("".gauge"")[3];

       function setGaugeValue(gauge, value) {
      if (value < 0 || value > 1) {
        return;
      }

      gauge.querySelector("".gauge__fill"").style.transform = `rotate(${
        value / 2
      }turn)`;
      gauge.querySelector("".gauge__cover"").textContent = `${Math.round(
        value * 100
      )}%`;
    }
        // Import the functions you need from the SDKs you need
        import { initializeApp } from ""https://www.gstatic.com/firebasejs/9.6.6/firebase-app.js"";
        import { getAnalytics } from ""https://www.gstatic.com/firebasejs/9.6.6/firebase-analytics.js"";
        // TODO: Add SDKs for Firebase products that you want to use
        // https://firebase.google.com/docs/web/setup#available-libraries

        // Your web app's Firebase configuration
        // For Firebase JS SDK v7.20.0 and later, measurementId is optional
        const fir");
                WriteLiteral(@"ebaseConfig = {
          apiKey: ""AIzaSyC-yIUJ4vRjf6UUeQW_4j0zIqPphI2Bh_Y"",
          authDomain: ""iotfarmsystem.firebaseapp.com"",
          databaseURL: ""https://iotfarmsystem-default-rtdb.firebaseio.com"",
          projectId: ""iotfarmsystem"",
          storageBucket: ""iotfarmsystem.appspot.com"",
          messagingSenderId: ""576170551394"",
          appId: ""1:576170551394:web:081f20675f679ccf5bc93b"",
          measurementId: ""G-95J4P66NFL""
        };

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const analytics = getAnalytics(app);

        import {getDatabase,ref,get,child,update,remove}
        from ""https://www.gstatic.com/firebasejs/9.6.6/firebase-database.js"";
        const db=getDatabase();

        function readData(){
          const dbref=ref(db);
          get(child(dbref,""UserId2"")).then((snapshot)=>{
            if(snapshot.exists()){
            setGaugeValue(gaugeElement, '0.0'+snapshot.val().PHSensor);
            setGaugeV");
                WriteLiteral(@"alue(gaugeElement1, 0.09);
            setGaugeValue(gaugeElement2, 0.5);
            setGaugeValue(gaugeElement3, 0.1);
              console.log(snapshot.val().PHSensor);
              console.log(snapshot.val().hSensor);
              console.log(snapshot.val().isAuto);
              console.log(snapshot.val().tempSensor);
              console.log(snapshot.val().waterSwitch);
            }else{
              alert('data not found');
            }

          });
        }
        function updateData(){
          update(ref(db,""UserId2""),{
            PHSensor : 6
          }).then(()=>{

            alert(""done"");

            }).catch((error)=>{
              alert(error);
            });
            }
            setInterval(readData,60000);
        document.getElementsByClassName(""action"")[0].addEventListener('click',readData);

        document.getElementsByClassName(""action"")[1].addEventListener('click',updateData);


      </script> -->
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
